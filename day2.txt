<template>
  <div>
    <h2>Sending messages</h2>
    <button @click="sendMessage">Send</button>
  </div>
</template>

<script setup>
import eventBus from "./eventBus";
const sendMessage = () => {
  eventBus.emit("messageEvent", "Mail from sender....!");
};
</script>

<style scoped></style>


------------------


<template>
  <div>
    Reciever
    <p>{{ message }}</p>

    <hr>
    <button @click="sendMessage">send message to parent</button>
  </div>
</template>

<script setup lang="ts">
import { onMounted, ref,defineEmits } from "vue";
import eventBus from "./eventBus";


const emit=defineEmits<{
    (event:"udateMessage",message:string):void
}>()

const messageToParent=ref("hellooo, this is message from the child")

const sendMessage=()=>{
    emit("udateMessage",messageToParent.value)
}
// alternative to data() in usual codes
const message = ref("");


const recieveMessage = (msg: string) => {
  message.value = msg;
};
onMounted(() => {
  eventBus.on("messageEvent", recieveMessage);
});
</script>

<style scoped></style>


----------------


<template>
    <div>
        <p>I am parent component</p>
                    <p>Message From  Child : {{ data }}</p>
        <hr/>
<Sender/>
<hr>
<Reciever @udateMessage="handleMessage"/>
    </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'

import Sender from './Sender.vue';
import Reciever from './Reciever.vue';

const data= ref('')
const handleMessage=(msg:string)=>{
    data.value=msg

}
</script>

<style scoped>

</style>


-----------


import mitt from 'mitt'

type Events={
    messageEvent:string
}

const eventBus= mitt<Events>()

export default eventBus
