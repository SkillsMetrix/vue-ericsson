<script setup>
import { ref, onMounted } from "vue";
import WeatherBanner from "./WeatherBanner.vue";
import CitySearch from "./CitySearch.vue";
import CityList from "./CityList.vue";
import axios from "axios";
import { useCitiesStore } from "../../src/stores/cities";

const cityStore = useCitiesStore();

// message to display for Banner
const messageToDisplay = ref("");

const messageType = ref("Info");

const openweathermapApiKey = ref("b3aaa0b3323c0baab93aff38f75b44cb");

onMounted(() => {
  console.log("mounted");

  searchCity("pune");
});
const searchCity = async (inputCity) => {
  var latitude = 0.0;
  var longitude = 0.0;
  var city = "";
  var state = "";
  var country = "";
  try {
    const response = await axios.get(
      "https://api.openweathermap.org/geo/1.0/direct?q=" +
        inputCity +
        "&APPID=" +
        openweathermapApiKey.value
    );
    console.log(
      `Sucessfully retrived coordinates for ${inputCity}  ${response.data[0].lat}`
    );
  } catch (error) {
    console.log(error);
  }



------------------


import {defineStore} from 'pinia'

export const useCitiesStore=defineStore('cities',{
    state:() =>({
        weatherData:[]
    }),
    // getters return data from the store
    getters:{
        getNumberOfCities:(state) => {return state.weatherData.length}
    },
    //actions are the operations that changes the state
    actions:{
        addCity(city,state,country,summary,currentTemp,high,low) {
            if(this.weatherData.find(({cityName}) => cityName === city) ===undefined){
                this.weatherData.push({
                    'cityName' :city,
                    'stateName': state,
                    'countryAbbreviation' :country,
                    'weatherSummary': summary,
                    'currentTemprature': currentTemp,
                    'dailyHigh' : high,
                    'dailyLow':low
                })
            }
        },
        clearAllCities(){
            this.weatherData.length =0
        }
    }

})

};
</script>

<template>content</template>
